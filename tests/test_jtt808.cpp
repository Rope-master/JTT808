#define BOOST_TEST_MODULE JTT808_TEST
#include <boost/test/included/unit_test.hpp>
#include <jtt808.h>

namespace tt = boost::test_tools;

BOOST_AUTO_TEST_SUITE(DoEscapeForReceive_0x7e_0x7d_Escape_Test_Suite)
BOOST_AUTO_TEST_CASE(failed_to_escape_because_too_short)
{
    BYTE raw[] = {0x7e, 0x30, 0x7d, 0x02, 0x08, 0x7d, 0x01, 0x55, 0x7e};
    BOOST_TEST_REQUIRE(DoEscapeForReceive(raw, NULL, sizeof(raw)/sizeof(BYTE)) == ERR_LENGTH_TOO_SHORT);
}

BOOST_AUTO_TEST_CASE(failed_to_escape_because_invalidate_masseage_with_none_indentifier)
{
    BYTE raw[] = {0x30, 0x7d, 0x02, 0x08, 0x7d, 0x01, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    BOOST_TEST_REQUIRE(DoEscapeForReceive(raw, NULL, sizeof(raw)/sizeof(BYTE)) == ERR_INVALIDATE_MSG);
}

BOOST_AUTO_TEST_CASE(failed_to_escape_because_invalidate_masseage_with_one_indentifier)
{
    BYTE raw[] = {0x7e, 0x30, 0x7d, 0x02, 0x08, 0x7d, 0x01, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    BOOST_TEST_REQUIRE(DoEscapeForReceive(raw, NULL, sizeof(raw)/sizeof(BYTE)) == ERR_INVALIDATE_MSG);
}

BOOST_AUTO_TEST_CASE(failed_to_escape_because_invalidate_masseage_with_more_than_two_indentifier)
{
    BYTE raw[] = {0x7e, 0x30, 0x7d, 0x02, 0x08, 0x7d, 0x01, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e};
    BOOST_TEST_REQUIRE(DoEscapeForReceive(raw, NULL, sizeof(raw)/sizeof(BYTE)) == ERR_INVALIDATE_MSG);
}

BOOST_AUTO_TEST_CASE(_0x7e_escape)
{
    BYTE expect[] = {0x30, 0x7e, 0x08, 0x70, 0x01, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    BYTE raw[] = {0x7e, 0x30, 0x7d, 0x02, 0x08, 0x70, 0x01, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e};
    BYTE res[12] = {};
    DoEscapeForReceive(raw, res, sizeof(raw)/sizeof(BYTE));
    BOOST_TEST_REQUIRE(expect == res, tt::per_element());
}

BOOST_AUTO_TEST_CASE(_0x7d_escape)
{
    BYTE expect[] = {0x30, 0x08, 0x7d, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    BYTE raw[] = {0x7e, 0x30, 0x08, 0x7d, 0x01, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e};
    BYTE res[12] = {};
    DoEscapeForReceive(raw, res, sizeof(raw)/sizeof(BYTE));
    BOOST_TEST_REQUIRE(expect == res, tt::per_element());
}

BOOST_AUTO_TEST_CASE(_0x7e_0x7d_escape)
{
    BYTE expect[] = {0x30, 0x7e, 0x08, 0x7d, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    BYTE raw[] = {0x7e, 0x30, 0x7d, 0x02, 0x08, 0x7d, 0x01, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e};
    BYTE res[12] = {};
    DoEscapeForReceive(raw, res, sizeof(raw)/sizeof(BYTE));
    BOOST_TEST_REQUIRE(expect == res, tt::per_element());
}
BOOST_AUTO_TEST_SUITE_END()
